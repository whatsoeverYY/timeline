# Vue.js 项目 Cursor 规则

## 项目概述
这是一个使用 Vue 3 + TypeScript + Vite 的现代 Vue.js 项目，集成了 ESLint 和 Prettier 用于代码质量和格式化。

## 代码风格和规范

### Vue 组件
- 使用 Composition API 优于 Options API
- 组件名使用 PascalCase
- 文件名使用 kebab-case 或 PascalCase，保持一致性
- 使用 `<script setup>` 语法糖
- 模板中使用 v-bind 简写语法 (`:`) 和 v-on 简写语法 (`@`)
- 优先使用组合式函数 (composables) 来共享逻辑

### TypeScript
- 启用严格模式，严格遵循类型检查
- 为所有函数参数和返回值提供类型注解
- 使用接口 (interface) 定义对象类型
- 避免使用 `any` 类型，必要时使用 `unknown`
- 使用泛型提高代码复用性
- 为 Vue 组件的 props 和 emits 提供完整的类型定义

### 代码组织
- 按功能模块组织代码结构
- 使用 `composables/` 目录存放组合式函数
- 使用 `components/` 目录存放可复用组件
- 使用 `views/` 或 `pages/` 目录存放页面组件
- 使用 `types/` 目录存放类型定义
- 使用 `utils/` 目录存放工具函数

### 命名规范
- 变量和函数使用 camelCase
- 常量使用 SCREAMING_SNAKE_CASE
- 组件名使用 PascalCase
- 文件名保持一致的命名风格
- 事件处理函数以 `handle` 或 `on` 开头

### 性能优化
- 使用 `v-memo` 优化重复渲染
- 合理使用 `v-once` 减少不必要的重新渲染
- 使用 `shallowRef` 和 `shallowReactive` 优化大型对象
- 避免在模板中使用复杂的表达式，抽取为计算属性
- 使用异步组件和动态导入进行代码分割

### 最佳实践
- 使用 `defineProps` 和 `defineEmits` 宏定义组件接口
- 优先使用 `ref` 而非 `reactive`，除非需要解构
- 使用 `computed` 处理衍生状态
- 使用 `watch` 和 `watchEffect` 处理副作用
- 避免在 `setup` 中直接修改 props
- 使用 `provide/inject` 进行深层组件通信
- 合理使用 Vue 的内置指令和修饰符

### 错误处理
- 使用 `try-catch` 包装可能出错的异步操作
- 提供有意义的错误信息
- 使用 Vue 的错误边界处理组件错误
- 避免静默忽略错误

### 测试
- 为关键业务逻辑编写单元测试
- 使用 Vitest 作为测试框架
- 测试组件的行为而非实现细节
- 使用 Vue Testing Utils 进行组件测试

### 样式
- 使用 scoped 样式避免样式冲突
- 优先使用 CSS 模块或 CSS-in-JS 方案
- 使用 CSS 变量定义主题色彩
- 遵循 BEM 命名规范或使用原子化 CSS 框架

### 代码提交
- 使用语义化提交信息 (Conventional Commits)
- 提交前运行 lint 和格式化
- 保持提交粒度小而清晰
- 编写清晰的提交信息

## 技术栈
- Vue 3.5+
- TypeScript 5.8+
- Vite 6+
- ESLint 9+
- Prettier 3+
- Vue TSC 2+

请严格遵循以上规则和最佳实践，确保代码质量和项目的可维护性。 