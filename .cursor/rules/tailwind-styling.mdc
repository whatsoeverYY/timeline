---
description:
globs:
alwaysApply: false
---
# Tailwind CSS 样式规则

## 总体原则
- 优先使用 Tailwind CSS 的 utility classes 而不是自定义 CSS
- 将 class 直接写在 HTML 标签内部，避免使用单独的 CSS 文件
- 使用 Tailwind 的响应式前缀来处理不同屏幕尺寸
- 使用 Tailwind 的状态变体来处理交互状态

## 样式应用方式
### 推荐：在标签内部使用 Tailwind classes
```vue
<template>
  <!-- 推荐：直接在标签上使用 Tailwind classes -->
  <div class="flex items-center justify-between bg-white p-4 shadow-md">
    <h1 class="text-2xl font-bold text-gray-800">标题</h1>
    <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
      按钮
    </button>
  </div>
</template>
```

### 不推荐：使用单独的 CSS 类
```vue
<template>
  <!-- 不推荐：定义单独的 CSS 类 -->
  <div class="header-container">
    <h1 class="main-title">标题</h1>
    <button class="primary-button">按钮</button>
  </div>
</template>

<style>
.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  /* ... */
}
</style>
```

## 布局优先使用 Tailwind
### Flexbox 布局
- 使用 `flex`、`flex-col`、`flex-row` 设置 flex 容器
- 使用 `justify-center`、`justify-between`、`justify-start` 等对齐内容
- 使用 `items-center`、`items-start`、`items-end` 交叉轴对齐
- 使用 `flex-1`、`flex-shrink-0`、`flex-grow` 控制弹性项目

### Grid 布局
- 使用 `grid`、`grid-cols-{n}` 创建网格布局
- 使用 `col-span-{n}`、`row-span-{n}` 控制网格项跨越
- 使用 `gap-{size}` 设置网格间距

### 示例
```vue
<template>
  <!-- Flexbox 布局 -->
  <div class="flex flex-col md:flex-row items-center justify-between p-6 bg-gray-100">
    <div class="flex-1 mr-4">内容区域</div>
    <div class="flex items-center space-x-4">
      <button class="px-4 py-2 bg-blue-500 text-white rounded">按钮1</button>
      <button class="px-4 py-2 bg-gray-500 text-white rounded">按钮2</button>
    </div>
  </div>
  
  <!-- Grid 布局 -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
    <div class="bg-white p-4 rounded shadow">卡片1</div>
    <div class="bg-white p-4 rounded shadow">卡片2</div>
    <div class="bg-white p-4 rounded shadow">卡片3</div>
  </div>
</template>
```

## 响应式设计
### 使用响应式前缀
- `sm:` (640px+)
- `md:` (768px+)
- `lg:` (1024px+)
- `xl:` (1280px+)
- `2xl:` (1536px+)

### 示例
```vue
<template>
  <div class="p-4 sm:p-6 md:p-8 lg:p-12">
    <h1 class="text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold">
      响应式标题
    </h1>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
      <!-- 网格项 -->
    </div>
  </div>
</template>
```

## 交互状态
### 使用状态变体
- `hover:` 悬停状态
- `focus:` 聚焦状态
- `active:` 激活状态
- `disabled:` 禁用状态
- `group-hover:` 组悬停状态

### 示例
```vue
<template>
  <button class="px-4 py-2 bg-blue-500 text-white rounded 
                 hover:bg-blue-600 focus:outline-none focus:ring-2 
                 focus:ring-blue-500 focus:ring-opacity-50 
                 disabled:opacity-50 disabled:cursor-not-allowed
                 transition-all duration-200">
    交互按钮
  </button>
  
  <div class="group bg-white p-4 rounded shadow hover:shadow-lg transition-shadow">
    <h3 class="text-lg font-semibold group-hover:text-blue-600">卡片标题</h3>
    <p class="text-gray-600">卡片描述</p>
  </div>
</template>
```

## 颜色系统
### 使用 Tailwind 预定义颜色
- 文本颜色：`text-gray-800`、`text-blue-600`、`text-red-500`
- 背景颜色：`bg-white`、`bg-gray-100`、`bg-blue-500`
- 边框颜色：`border-gray-300`、`border-blue-500`

### 示例
```vue
<template>
  <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
    <div class="bg-blue-50 px-4 py-2 border-b border-blue-200">
      <h3 class="text-blue-800 font-semibold">信息标题</h3>
    </div>
    <div class="p-4">
      <p class="text-gray-700">内容文本</p>
      <div class="mt-4 flex space-x-2">
        <span class="px-2 py-1 bg-green-100 text-green-800 text-sm rounded">成功</span>
        <span class="px-2 py-1 bg-red-100 text-red-800 text-sm rounded">错误</span>
      </div>
    </div>
  </div>
</template>
```

## 间距和尺寸
### 使用 Tailwind 间距系统
- 内间距：`p-{size}`、`px-{size}`、`py-{size}`
- 外间距：`m-{size}`、`mx-{size}`、`my-{size}`
- 宽高：`w-{size}`、`h-{size}`、`max-w-{size}`、`min-h-{size}`

### 示例
```vue
<template>
  <div class="max-w-4xl mx-auto p-6">
    <div class="space-y-6">
      <div class="w-full h-64 bg-gray-200 rounded-lg"></div>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="p-4 bg-white rounded shadow">
          <h3 class="mb-2 text-lg font-semibold">标题</h3>
          <p class="text-gray-600">描述文本</p>
        </div>
      </div>
    </div>
  </div>
</template>
```

## 组件复用
### 对于复杂的重复样式，使用 Vue 组件
```vue
<!-- BaseButton.vue -->
<template>
  <button 
    :class="[
      'px-4 py-2 rounded font-medium transition-colors focus:outline-none focus:ring-2',
      variantClasses,
      sizeClasses
    ]"
    v-bind="$attrs"
  >
    <slot />
  </button>
</template>

<script setup lang="ts">
interface Props {
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'sm' | 'md' | 'lg'
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'primary',
  size: 'md'
})

const variantClasses = computed(() => {
  const variants = {
    primary: 'bg-blue-500 text-white hover:bg-blue-600 focus:ring-blue-500',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500',
    danger: 'bg-red-500 text-white hover:bg-red-600 focus:ring-red-500'
  }
  return variants[props.variant]
})

const sizeClasses = computed(() => {
  const sizes = {
    sm: 'px-3 py-1 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-lg'
  }
  return sizes[props.size]
})
</script>
```

## 避免的做法
### 不要
- 不要在 `<style>` 标签中写大量自定义 CSS
- 不要创建不必要的 CSS 类来包装单个 Tailwind 类
- 不要忽视响应式设计，始终考虑不同屏幕尺寸
- 不要过度使用 `!important`，使用 Tailwind 的 `!` 前缀
