---
description:
globs:
alwaysApply: false
---
# Lodash 数据处理规则

## 总体原则
- 在进行数据处理时，优先使用 lodash 提供的函数而不是原生 JavaScript 方法
- 导入 lodash 函数时，使用具名导入提高性能和可读性
- 选择适当的 lodash 函数来提高代码的可读性和性能

## 数组操作优先使用 Lodash
### 使用 lodash 的数组方法替代原生方法
- 使用 `_.filter()` 替代 `Array.prototype.filter()`
- 使用 `_.map()` 替代 `Array.prototype.map()`
- 使用 `_.find()` 替代 `Array.prototype.find()`
- 使用 `_.reduce()` 替代 `Array.prototype.reduce()`
- 使用 `_.sortBy()` 替代复杂的 `Array.prototype.sort()`
- 使用 `_.groupBy()` 进行数组分组
- 使用 `_.uniq()` 去除数组重复项
- 使用 `_.chunk()` 分割数组
- 使用 `_.flatten()` 或 `_.flattenDeep()` 扁平化数组

### 示例
```typescript
// 推荐：使用 lodash
import { filter, map, sortBy, groupBy, uniq } from 'lodash'

const filteredData = filter(users, user => user.isActive)
const mappedData = map(users, 'name')
const sortedData = sortBy(users, ['age', 'name'])
const groupedData = groupBy(users, 'department')
const uniqueIds = uniq(userIds)

// 不推荐：使用原生方法
const filteredData = users.filter(user => user.isActive)
const mappedData = users.map(user => user.name)
```

## 对象操作优先使用 Lodash
### 使用 lodash 的对象方法
- 使用 `_.get()` 安全访问嵌套对象属性
- 使用 `_.set()` 设置嵌套对象属性
- 使用 `_.has()` 检查对象属性是否存在
- 使用 `_.pick()` 选择对象的特定属性
- 使用 `_.omit()` 排除对象的特定属性
- 使用 `_.merge()` 或 `_.assign()` 合并对象
- 使用 `_.cloneDeep()` 深拷贝对象

### 示例
```typescript
// 推荐：使用 lodash
import { get, set, pick, omit, cloneDeep } from 'lodash'

const value = get(user, 'profile.address.city', '默认城市')
const userData = pick(user, ['name', 'email', 'age'])
const userWithoutSensitive = omit(user, ['password', 'token'])
const clonedUser = cloneDeep(user)

// 不推荐：使用原生方法或手动操作
const value = user?.profile?.address?.city || '默认城市'
```

## 字符串处理优先使用 Lodash
### 使用 lodash 的字符串方法
- 使用 `_.camelCase()`、`_.kebabCase()`、`_.snakeCase()` 转换字符串格式
- 使用 `_.capitalize()` 首字母大写
- 使用 `_.startsWith()` 和 `_.endsWith()` 检查字符串前缀后缀
- 使用 `_.truncate()` 截断字符串

### 示例
```typescript
// 推荐：使用 lodash
import { camelCase, kebabCase, capitalize, truncate } from 'lodash'

const camelCased = camelCase('hello world')
const kebabCased = kebabCase('Hello World')
const capitalized = capitalize('hello world')
const truncated = truncate(longText, { length: 100 })
```

## 类型检查优先使用 Lodash
### 使用 lodash 的类型检查方法
- 使用 `_.isArray()`、`_.isObject()`、`_.isString()` 等进行类型检查
- 使用 `_.isEmpty()` 检查空值
- 使用 `_.isNil()` 检查 null 或 undefined

### 示例
```typescript
// 推荐：使用 lodash
import { isArray, isEmpty, isNil } from 'lodash'

if (isArray(data) && !isEmpty(data)) {
  // 处理数组数据
}

if (!isNil(value)) {
  // 处理非空值
}
```

## 导入规范
- 使用具名导入：`import { method1, method2 } from 'lodash'`
- 避免导入整个 lodash 库：避免 `import _ from 'lodash'`
- 根据需要导入特定方法，减少打包体积
